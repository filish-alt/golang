// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.25.0
// source: users.sql

package dbmigrate

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createUsers = `-- name: CreateUsers :one
INSERT INTO users (
  id, username,role
) VALUES (
  $1, $2, $3
) RETURNING id, username, role, created_at
`

type CreateUsersParams struct {
	ID       int32       `json:"id"`
	Username string `json:"username"`
	Role     string `json:"role"`
}

func (q *Queries) CreateUsers(ctx context.Context, arg CreateUsersParams) (User, error) {
	row := q.db.QueryRow(ctx, createUsers, arg.ID, arg.Username, arg.Role)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.Role,
		&i.CreatedAt,
	)
	return i, err
}

const deleteUsers = `-- name: DeleteUsers :exec
DELETE FROM users
WHERE id = $1
`

func (q *Queries) DeleteUsers(ctx context.Context, id int32) error {
	_, err := q.db.Exec(ctx, deleteUsers, id)
	return err
}

const getUsers = `-- name: GetUsers :one
SELECT id, username, role, created_at FROM users
WHERE id = $1 LIMIT 1
`

func (q *Queries) GetUsers(ctx context.Context, id int32) (User, error) {
	row := q.db.QueryRow(ctx, getUsers, id)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.Role,
		&i.CreatedAt,
	)
	return i, err
}

const listUsers = `-- name: ListUsers :many

SELECT id, username, role, created_at FROM users
WHERE Role = $1
ORDER BY id
LIMIT $2
OFFSET $3
`

type ListUsersParams struct {
	Role   pgtype.Text `json:"role"`
	Limit  int32       `json:"limit"`
	Offset int32       `json:"offset"`
}

// -- name: GetAccountForUpdate :one
// SELECT * FROM accounts
// WHERE id = $1 LIMIT 1
// FOR NO KEY UPDATE;
func (q *Queries) ListUsers(ctx context.Context, arg ListUsersParams) ([]User, error) {
	rows, err := q.db.Query(ctx, listUsers, arg.Role, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []User{}
	for rows.Next() {
		var i User
		if err := rows.Scan(
			&i.ID,
			&i.Username,
			&i.Role,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateUsers = `-- name: UpdateUsers :one
UPDATE users
SET Role = $2
WHERE id = $1
RETURNING id, username, role, created_at
`

type UpdateUsersParams struct {
	ID   int32       `json:"id"`
	Role pgtype.Text `json:"role"`
}

func (q *Queries) UpdateUsers(ctx context.Context, arg UpdateUsersParams) (User, error) {
	row := q.db.QueryRow(ctx, updateUsers, arg.ID, arg.Role)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.Role,
		&i.CreatedAt,
	)
	return i, err
}
